.. _exam610-p2.rst:


#########################
Exam 610 Part 2: Security
#########################

********************************************************
Checking the privileges, authorities, and authorizations
********************************************************

==============================
Check instance-level authority
==============================

::

        => db2 get dbm cfg | grep -i SYS
         Federated Database System Support           (FEDERATED) = NO
         SYSADM group name                        (SYSADM_GROUP) = PDXDB2
         SYSCTRL group name                      (SYSCTRL_GROUP) =
         SYSMAINT group name                    (SYSMAINT_GROUP) =
         SYSMON group name                        (SYSMON_GROUP) =
         Priority of agents                           (AGENTPRI) = SYSTEM

==============================
Check database-level authority
==============================

1. connect to a database for using the System Catalog Views

::

        db2 connect to feddb


2. list all authorities, privileges and permissions

::

        db2 list tables for schema syscat | grep -i auth

====================  ==========================================================================
system catalog         description
====================  ==========================================================================
SYSCAT.DBAUTH           List the database privileges
SYSCAT.TABAUTH          List the table and view privileges
SYSCAT.COLAUTH          List the column privileges
SYSCAT.PACKAGEAUTH      List the package privileges
SYSCAT.INDEXAUTH        List the index privileges
SYSCAT.SCHEMAAUTH       List the schema privileges
SYSCAT.PASSTHRUAUTH     List the server privileges
SYSCAT.ROUTINEAUTH      List the routine (functions, methods, and stored procedure) privileges
====================  ==========================================================================

::

        => db2 list tables for schema syscat | grep -i auth
        COLAUTH                         SYSCAT          V     2015-11-17-15.35.30.385360
        DBAUTH                          SYSCAT          V     2015-11-17-15.35.32.608334
        INDEXAUTH                       SYSCAT          V     2015-11-17-15.35.34.092792
        LIBRARYAUTH                     SYSCAT          V     2015-11-17-15.35.35.642969
        MODULEAUTH                      SYSCAT          V     2015-11-17-15.35.35.909928
        PACKAGEAUTH                     SYSCAT          V     2015-11-17-15.35.36.524079
        PASSTHRUAUTH                    SYSCAT          V     2015-11-17-15.35.36.962899
        ROLEAUTH                        SYSCAT          V     2015-11-17-15.35.37.523228
        ROUTINEAUTH                     SYSCAT          V     2015-11-17-15.35.37.673954
        SCHEMAAUTH                      SYSCAT          V     2015-11-17-15.35.38.636950
        SEQUENCEAUTH                    SYSCAT          V     2015-11-17-15.35.39.466695
        SURROGATEAUTHIDS                SYSCAT          V     2015-11-17-15.35.40.171503
        TABAUTH                         SYSCAT          V     2015-11-17-15.35.40.256230
        TBSPACEAUTH                     SYSCAT          V     2015-11-17-15.35.40.970814
        VARIABLEAUTH                    SYSCAT          V     2015-11-17-15.35.41.775828
        WORKLOADAUTH                    SYSCAT          V     2015-11-17-15.35.42.700932
        XSROBJECTAUTH                   SYSCAT          V     2015-11-17-15.35.43.355262

3. get overview of authorities, privileges on all user, role, groups

::

        db2 select * from SYSCAT.DBAUTH

.. note::

        You can find out table ``SYSCAT.DBAUTH`` definition by running ``db2 describe table SYSCAT.AUTH``


4. get all authorities for specific user

::

        => db2 " select authority,D_USER from table (SYSPROC.AUTH_LIST_AUTHORITIES_FOR_AUTHID('IIDEV28','U')) as T"

        AUTHORITY                                                                     D_USER
        ----------------------------------------------------------------------------- ------
        SYSADM                                                                        *
        DBADM                                                                         Y
        CREATETAB                                                                     N
        BINDADD                                                                       N
        CONNECT                                                                       N
        CREATE_NOT_FENCED_ROUTINE                                                     N
        SYSCTRL                                                                       *
        SYSMAINT                                                                      *
        IMPLICIT_SCHEMA                                                               N
        LOAD                                                                          N
        CREATE_EXTERNAL_ROUTINE                                                       N
        QUIESCE_CONNECT                                                               N
        SECADM                                                                        Y
        SYSMON                                                                        *
        SQLADM                                                                        N
        WLMADM                                                                        N
        EXPLAIN                                                                       N
        DATAACCESS                                                                    Y
        ACCESSCTRL                                                                    Y
        CREATE_SECURE_OBJECT                                                          N

        20 record(s) selected.

.. note::

        The statement retrieve all authorities user IIDEV28 has granted directly to her

.. seealso::

        More about `AUTH_LIST_AUTHORITIES_FOR_AUTHID <https://www-01.ibm.com/support/knowledgecenter/SSEPGG_9.5.0/com.ibm.db2.luw.sql.rtn.doc/doc/r0052898.html>`_

************************************
Granting Authorities and Privileges
************************************

===========================
Explicit Privileges example
===========================

Privileges can be explicitly granted and revoked to users, roles, or groups using the ``GRANT`` and ``REVOKE`` commands. Following example demonstrates
how we can use these commands on various objects

1. While logged in as a user with Administrator authority on Windows, bring up two DB2 command windows.

2. Fist create a test db to play with using "Administrator: DB2 CLP"

::

        db2 create database test

3. Now, we connect to test database as an administrator in wondows 1

::

        db2 connect to test user db2admin using passw0rd

4. Then, we create a table under current schema, which is "db2admin"

::

        db2 create table t1 (c1t1 char(10))

5. Verify that we do have a table called t1 under schema db2admin

::

        db2 list tables for schema db2admin

6. Bring up window 2, and connect to test database use another user

::

        db2 connect to test user db2test using passw0rd

.. note::

        1. Need to create a standard user "db2test" under windows first
        2. Remember that commands in windows 1 are being issued by user "db2admin" with SYSADMIN authority.
           The commands in windows 2 is issued by user "db2test" who has no specific authority or privileges

7. In windows we issue the following commands

::

        C:\Program Files\IBM\SQLLIB\BIN>db2 select * from db2admin.t1
        SQL0551N  The statement failed because the authorization ID does not have the
        required authorization or privilege to perform the operation.  Authorization
        ID: "DB2TEST".  Operation: "SELECT". Object: "DB2ADMIN.T1".  SQLSTATE=42501

8. We grant the "SELECT" privilege to user "db2test1" for table t1 from window 1

::

        db2 grant select on table t1 to user db2test

9. Then we do select statement from window 2 again

::

        C:\Program Files\IBM\SQLLIB\BIN>db2 select * from db2admin.t1

        C1T1
        ----------

        0 record(s) selected.

10. We then revoke the SELECT privilege from user "db2test"

::

        db2 revoke select on table t1 from user db2test

11. From window 2, we can no longer do the selection again:

::

        C:\Program Files\IBM\SQLLIB\BIN>db2 select * from db2admin.t1
        SQL0551N  The statement failed because the authorization ID does not have the
        required authorization or privilege to perform the operation.  Authorization
        ID: "DB2TEST".  Operation: "SELECT". Object: "DB2ADMIN.T1".  SQLSTATE=42501

==========================
GRANT statement examples
==========================

- Give a user whose authorization ID is USER1 the ability to create a view on a table named SALES

::

        GRANT SELECT ON TABLE sales TO user1

- Give a user whose authorization ID is USER1 the privileges needed to remove records from a table
  named INVENTORY, as well as the ability to give those privileges to others

::

        GRANT DELETE ON TABLE inventory to user1 WITH GRANT OPTION

- Give a user whose authorization ID is USER1 the privileges required to run an Embedded SQL application
  named HR.CALC_BONUS that calls a package named HR.CALCULATIONS

::

        GRANT EXECUTE ON PACKAGE hr.calculations TO user1

- Give a user whose authorization ID is USER1 the ability to assign a comment to a sequence named PRODUCT_ID

::

        GRANT ALTER ON SEQUENCE product_id TO user1

- Give two users (whose authorization IDs are USER1 and USER2) the privileges needed to perform DML operations
  on a table named DEPARTMENT using a view named DEPTVIEW

::

        GRANT SELECT, INSERT, UPDATE, DELETE ON deptview TO user1, user2

- Grant all privileges (except CONTROL privilege) for a table named EMPLOYEES to a role named ADMIN; then, give
  a user whose authorization ID is USER1 membership in the ADMIN role

::

        GRANT ALL ON TABLE employees to ROLE admin;
        GRANT ROLE admin TO user1;

=========================
REVOKE statement examples
=========================

- Remove the ability to create tables in a table space named HR from a user whose authorization ID is USER1

::

        REVOKE USE OF TABLESPACE hr FROM user1

- Remove the ability to use a UDF named MPH_TO_KPH from a user whose authorization ID is USER1

::

        REVOKE EXECUTE ON FUNCTION mph_to_kph FROM user1

- Remove the ability to modify information stored in the ADDRESS and HOME_PHONE columns of a table
  named EMPLOYEES from a user whose authorization ID is USER1

::

        REVOKE UPDATE (address, home_phone) ON TABLE emp_info FROM user1

- Remove the ability to add data to a table named SALES from a user whose authorization ID is USER1

::

        REVOKE INSERT ON TABLE sales FROM user1

- Prevent users in the special group PUBLIC from adding, changing, or deleting data stored in a table
  named EMPLOYEE

::

        REVOKE INSERT, UPDATE, DELETE ON TABLE employee FROM PUBLIC

- Remove a user whose authorization ID is USER1 from a role named ADMIN role

::
        
        REVOKE ROLE admin FROM user1

===============
Role Examples
===============

- Creating roles

::

        CREATE ROLE marketing;
        CREATE ROLE accountant;
        CREATE ROLE sales;

- Granting privileges to roles

::

        GRANT SELECT, UPDATE ON TABLE customer TO ROLE accountant;
        GRANT SELECT, INSERT, UPDATE ON TABLE customer to ROLE sales;
        GRANT SELECT ON TABLE customer TO ROLE marketing;

- Granting roles to users

::

        GRANT ROLE sales TO user1, user2;
        GRANT ROLE marketing TO user3;
        GRANT ROLE accountant TO user4; 

- Revoking roles from users

::

        REVOKE ROLE sales FROM user2;

====================================
Row and Column Access Control (RCAC)
====================================


SQL syntax
----------

- Creating row permission 

::

        CREATE PERMISSION [Permission Name] ON [Table Name]
        FOR ROWS WHERE 
        [Search Condition]
        ENFORCED FOR ALL ACCESS
        [ENABLE | DISABLE]

- Creating column mask

::

        CREATE MASK [Column Mask Name] ON [TABLE NAME] FOR
        COLUMN [Column Name] RETURN
          CASE
             WHEN [condition]
                THEN [return value]
             ELSE [return value]
             ...
          END
        [ENABLE | DISABLE]

- Activating row access control on a table

::

        ALTER TABLE [table name] ACTIVATE ROW ACCESS CONTROL

- Activating column access control on a table

::

        ALTER TABLE [table name] ACTIVATE COLUMN ACCESS CONTROL


.. note::

        row permission and column mask will be effective only when row access control and column access control
        are activated.

RCAC built-in scalar functions
------------------------------

::

        verify_role_for_user (user, role1, role2, ...)

The result is 1 if any of the roles associated with the user are in the list of role1, role2, and so on, else 0.

::

        verify_group_for_user (user, group1, group2, ...)

The result is 1 if any of the groups associated with the user are in the list of group1, group2, and so on, else 0.

Example
-------

- create a row permission named SREP_ROW_ACCESS that allows only member of the role SREP (for sales representative) to 
  see records stored in a table named SALES

::

        CREATE PERMISSION srep_row_access ON sales
        FOR ROWS WHERE
                VERIFY_ROLE_FOR_USER (SESSION_USER,'SREP') = 1
        ENFORCED FOR ALL ACCESS
        ENABLE

- create a column mask named SSN_MASK that allows only members of the role HR to see Social Security numbers stored in 
  a column named SSN (in a table named EMPLOYEES) and that allows everyone else to see just the last four digits of 
  Social Security numbers

::

        CREATE MASK ssn_mask ON employees FOR
        COLUMN ssn RETURN
          CASE
             WHEN (VERIFY_GROUP_FOR_USER (SESSION_USER, 'HR') = 1)
               THEN ssn
             ELSE 'xxx-xx-' || SUBSTR(ssn, 8, 4)
          END
        ENABLE


Scenario: Implementing RCAC to STOREDB database
-----------------------------------------------

See `security tutorial <http://www.ibm.com/developerworks/data/tutorials/db2-cert6102/index.html#RCAC>`_

:download:`Implementing RCAC script <RCAC_Example.txt>`

.. note::

        The script follows tutorial example but use only two user accounts: "db2admin" and "db2test"
