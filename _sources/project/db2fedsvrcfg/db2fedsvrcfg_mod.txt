.. highlight:: sql
.. _db2fedsvrcfg_mod.rst:

MODIFICATION OF db2fedsvrcfg TOOL
=================================

Date: |today|

This doc intends to work as a record of how "db2fedsvrcfg" tool is being modified in 
order to adjust tool to meet "Add DB2 Federation Server capacity to NoSQL data source" project needs.

0. Code Change summary
----------------------

	- build info::
	
		The branch name got is: temp_iidev20_bigsql_main_hzy

		/vbs/engn/sqqg_odbc/db2fedsvrcfg/db2fedsvrcfg.C@@/main/temp_iidev20_bigsql_main_hzy/1
		/vbs/engn/sqqg_odbc/db2fedsvrcfg/db2odbct_analyze.C@@/main/temp_iidev20_bigsql_main_hzy/5
		/vbs/engn/sqqg_odbc/db2fedsvrcfg/db2odbct_statement.C@@/main/temp_iidev20_bigsql_main_hzy/4
		/vbs/engn/sqqg_odbc/db2fedsvrcfg/inc/db2odbct_common.h@@/main/temp_iidev20_bigsql_main_hzy/8
		/vbs/engn/sqqg_odbc/db2fedsvrcfg/inc/db2odbct_statement.h@@/main/temp_iidev20_bigsql_main_hzy/6

	- Add server attribute templates: (example: NULL_IN_SELECT)
	
		- code change for **db2fedsvrcfg.C** :ref:`link <db2fedsvrcfg-C>`
		
		- code change for **db2odbct_common.h** :ref:`link <db2odbct-common-h>`
		
		- code change for **db2odbct_analyze.C** :ref:`link <db2odbct-analyze-C>`
		
		- code change for **db2odbct_statement.h** :ref:`link <db2odbct-statement-h>`
		
		- code change for **db2odbct_statement_C** :ref:`link <db2odbct-statement-C>`
		
	- Server attributes added:
	
		See :ref:`db2fedsvrcfg.rst` Zhi Tong's doc. Added highlighted in green.
		
	- enable db2odbct trace :ref:`link <db2odbct-trace>`
		
1. Analyze statement generation
---------------------------------

According to :ref:`analyze-logic`:
	
		.. code-block:: c++
				:caption: Analyze SQL statement generate
					
					TString stmt = generator->generate(); [detail see db2odbct_statement]

Before looking at ``generate()`` function, let's first take a look at ``db2odbct_statement.h`` file.

		.. code-block:: c++
			
			typedef struct Analyze_Statement
			{
				char   *option_id;
				char   *analyze_stmt;
			} Analyze_Statement;
			
			static Analyze_Statement analyze_stmt[] =
			{
				{
					SQLQG_GROUP_BY_SERVER_OPTION,
					"SELECT IT1C3 FROM %s GROUP BY IT1C3"
				},
				{
					SQLQG_ORDER_BY_SERVER_OPTION,
					"SELECT IT1C3 FROM %s ORDER BY IT1C3"
				},
				{
					SQLQG_COLFUNC_SERVER_OPTION,
					"SELECT MAX(IT1C1) FROM %s"
				},
				{
					SQLQG_VARCHAR_BLANKPADDED_COMPARISON_SERVER_OPTION,
					"SELECT IT1C1 FROM %s WHERE IT1C6 = '12345  '"
				},
				{
					SQLQG_CHAR_BLANKPADDED_COMPARISON_SERVER_OPTION,
					"SELECT IT1C1 FROM %s WHERE IT1C4 = 'F  '"
				},
				{
					SQLQG_COLFUNC_EXPR_SERVER_OPTION,
					"SELECT MAX(IT1C1+IT1C2) FROM %s"
				},
				{
					SQLQG_FUNCTION_IN_COUNT_SERVER_OPTION,
					"SELECT COUNT(IT1C1+IT1C2) FROM %s"
				},
				{
					SQLQG_COUNT_NON_DISTINCT_SERVER_OPTION,
					"SELECT COUNT(IT1C1) FROM %s"
				},
				{
					SQLQG_MAX_SEL_SIZE_SERVER_OPTION,
					"SELECT %s FROM %s"
				},
				{
					SQLQG_MAX_OB_SIZE_SERVER_OPTION,
					"SELECT IT3C1 FROM %s ORDER BY %s"
				},
				{
					SQLQG_MAX_GB_SIZE_SERVER_OPTION,
					"SELECT IT3C1 FROM %s GROUP BY %s"
				},
				{
					SQLQG_OUTER_JOINS_SERVER_OPTION,
					"SELECT IT1C3 FROM %s LEFT OUTER JOIN %s ON IT1C1 = IT2C2"
				},
				{
					SQLQG_NESTED_TAB_EXPR_SERVER_OPTION,
					"SELECT NTE.IT1C1 FROM (SELECT IT1C1, IT1C2 FROM %s) NTE"
				},
				{
					SQLQG_UPD_SET_DEFAULT_SERVER_OPTION,
					"UPDATE %s SET IT2C3 = DEFAULT WHERE IT2C2 = 56"
				},
					// "SELECT IT1C2 FROM IITEST1 
					//    WHERE IT1C1 = (SELECT IT2C2 FROM IITEST2 WHERE IT2C1=2)"
				{
					SQLQG_BASIC_PRED_RHS_SCALAR_SQ_SERVER_OPTION,
					"SELECT IT1C2 FROM %s WHERE IT1C1 = (SELECT IT2C2 FROM %s WHERE IT2C1=2)"
				},
				{
					SQLQG_UNION_ALL_SERVER_OPTION,
					"SELECT IT1C1 FROM %s UNION ALL SELECT IT2C1 FROM %s"
				},
				{
					SQLQG_COLFUNC_DISTINCT_SERVER_OPTION,
					"SELECT SUM(DISTINCT IT1C1) FROM %s"
				},
				{
					SQLQG_SELECT_DISTINCT_SERVER_OPTION,
					"SELECT DISTINCT IT1C3 FROM %s"
				},
				{
					SQLQG_EXISTS_PRED_SERVER_OPTION,
					"SELECT IT1C3 FROM %s WHERE EXISTS (SELECT * FROM %s)"
				},
			};
			
		.. note::
		
			1. ``Analyze_Statement`` is a struct, which contains ``char *analyze_stmt``
			
			2. ``analyze_stmt[]`` is an array of struct (``Analyze_Statement``), which can be used like
			
				.. code-block:: c++
					
					case SQLQG_SERVER_EXISTS_PRED_OPTION_ID:
					{
						SQL_statement.append(analyze_stmt[m_option_id].analyze_stmt,
											table_name[1],
											table_name[2]);
						break;
					}	
					
				in ``db2odbct_statement.C``
				
			3. Note that in ``analyze_stmt[]``, pre-defined query statement uses ``printf`` format. The placeholder ``%s`` can 
			   be substituted for table name.
			   
	2. 	tool checks 19 attributes. All have been added into ``Tuning_Server_Option_List`` through ``build_server_option_list`` function
		in "db2odbct2.C" file
		
	3. .. note::
	
		go to "vbs/engn/include" to find the official name for server attributes
		
		.. code-block:: c++
		
			#define SQLQG_SERVER_NULL_IN_SELECT                     "NULL_IN_SELECT"
			
		Then in the final display, add "DB2\_" for internal server attributes
		
		.. code-block:: bash
		
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_NULL_IN_SELECT 'N');
			
11/12/15:

.. _11-12-15-analysis:

	1. Goal: Need to figure out where ``CREATE "IITEST1"`` get generated and aim to remove quotation marks first. 
	
	2. Investigations:
	
		2.1 In ``db2odbct.C``, line 00118:
		
			.. code-block:: c++
			
				if(getenv("DB2ODBCT_DEBUG"))
				
		2.2  
		
.. _db2odbct-trace:
		
			.. note::
		
				To access debug trace file of this tool, run ``export DB2ODBCT_DEBUG=1``, then re-run the tool 
				the trace file called ``db2fedsvrcfg.trc`` will be found under the current working directory.
			   
		2.3 Based on trace, table name created when calling ``prepare_data_source``, which is located under
			**db2odbct2.C**, then the statement is created in line 00259:
			
				.. code-block:: c++
				
					TString stmt = generator->generate();
					
					
			``generate`` function is located under **db2odbct_statement.C**. Then table name (with quotation marks)
			get assigned in line 00131:
			
				.. code-block:: c++
				
					TString id_quote_str = TString(m_connection->get_id_quote_char());
					
			get appended to ``CREATE TABLE`` in line 00152:
			
				.. code-block:: c++
				
					SQL_statement.append(id_quote_str);
					
		2.4 **SUSCIPIOUS** There is 
		
				.. code-block:: c++
				
					#define MAX_SERVER_OPTIONS 11 /*!< Max number of server options */
					
			Probably we need to modify this value later on?
					
		2.5  Turns out that 
		
				.. code-block:: c++
				
					SQL_statement.append(id_quote_str);
					
			adding the single quotation mark
		
		
2. Modification log
-------------------

10/27/15:	
	
	* Start modification: bigsql_main
	* checkout source code
	
10/28/15:

	.. _db2fedsvrcfg-C:
	
	* let *db2fedsvrcfg.C* print out all the server option as long as *not* ``Tuning_Server_Option_Info::Tuning_Failure``

	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2fedsvrcfg_C_0.PNG
	
	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2fedsvrcfg_C_diff_0.PNG
												  
	Now the test result is:
	
		.. code-block:: bash
		
			=> db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc60/64/lib/VMmsss24.so -dsn mssql2005csdl1 -u j15user1 -p j15user1

			-- This CLP file was created using "db2fedsvrcfg" Version "10.6.0.3".
			-- Timestamp: 2015/10/28 15:00:30
			-- Server Name: SERVER1
			-- ODBC Driver Manager: /opt/oemclient/odbc60/64/lib/VMmsss24.so
			-- DSN Name: mssql2005csdl1
			-- Remote Database Name:
			-- Remote User Name: j15user1
			-- Remote Table Names: IITEST[#]
			-- Remote Data Source Codepage:
			-- Preparation: YES
			-- Verbose: NO


			-- Generating ALTER SERVER statement...

			-- --------------------------------------------------
			--  ALTER SERVER statements for server "SERVER1"
			-- --------------------------------------------------
			ALTER SERVER "SERVER1" OPTIONS (ADD PUSHDOWN 'Y');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_GROUP_BY 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_ORDER_BY 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_COLFUNC 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_VARCHAR_BLANKPADDED_COMPARISON 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_CHAR_BLANKPADDED_COMPARISON 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_COLFUNC_EXPR 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_FUNCTION_IN_COUNT 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_COUNT_NON_DISTINCT 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_MAX_SEL_SIZE '4005');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_MAX_OB_SIZE '256');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_MAX_GB_SIZE '256');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_OUTER_JOINS 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_NESTED_TAB_EXPR 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_UPD_SET_DEFAULT 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_BASIC_PRED_RHS_SCALAR_SQ 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_UNION_ALL 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_COLFUNC_DISTINCT 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_SELECT_DISTINCT 'N');
			ALTER SERVER "SERVER1" OPTIONS (ADD DB2_EXISTS_PRED 'N');

			The db2fedsvrcfg command completed successfully.


	.. _db2odbct-common-h:
	
	* Add one more server attribute "SQLQG_SERVER_NULL_IN_SELECT" into *db2odbct_common.h*

	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_0.PNG
	
	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_1.PNG
	
	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_diff.PNG

	.. _db2odbct-analyze-C:
	
	* Add ``case SQLQG_SERVER_NULL_IN_SELECT_OPTION_ID:`` in *db2odbct_analyze*
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_analyze_C_0.PNG
	
	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_analyze_C_diff_0.PNG

	.. _db2odbct-statement-h:
	
	* Add analyze statement query in *db2odbct_statement.h*
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_h_0.PNG

	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_h_diff_0.PNG
	
	.. note::
		
		Here, instead of using ``fprintf`` style statement like previous options in the tool (namely Option ID: 0 - 18), 
		I directly encode the table name into the query. 
			
	.. _db2odbct-statement-C:
	
	* Add ``case SQLQG_SERVER_NULL_IN_DISTINCT_OPTION_ID`` in "db2odbct_statement.C"
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_C_0.PNG
	
	|
	
	.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_C_diff_0.PNG

	.. note::
		
		Since in the analyze statement already contains hardcode table_name, and thus we don't need to do anything here (i.e. to replace
		%s with actual table_name like previous statements in tool)
			
	* checkin "db2odbct_statement.C", "db2odbct_statement.h", "db2odbct_analyze.C", "db2odbct_common.h", "db2fedsvrcfg.C"
	
11/10/15:

	* Finish adding server attributes (see Zhitong & Xue's doc :ref:`db2fedsvrcfg.rst`)

11/12/15:
	* Based upon 11/12/15 :ref:`analysis <11-12-15-analysis>`, remove quotation marks around 
	  "IITEST1" in **db2odbct_common.h**:
	  
	  **DOESN'T WORK**
	  
	  .. note::
	  
		Table definition has to fit into ``typedef struct Table_Definition``.
		In it, ``char *table_name`` - a string. The quotation mark is added somewhere else. 
	  
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_2.PNG
	  
	  |
	  
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_2_error.PNG
	  
	  
	* Also try to erase quotation marks around ``id_quote_str`` in **db2odbct_statement.C**
	
	  **DOESN'T WORK**
	  
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_3.PNG
	  
	  |
	  
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_common_h_3_error.PNG
	  
	* **FIND HOW QUOTATION MARKS ADDED** modified ``db2odbct_statement.C``
	
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_C_1.PNG
	  
	  |
	  
	  .. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/db2odbct_statement_C_1_diff.PNG
	
3. test
--------
	
Sanity check:
^^^^^^^^^^^^^
	
		a. [odbc] has to be the top of odbc.ini
		
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/sanity_check_01.PNG
			
		b. make sure the [dsn] Driver is loadable
		
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/sanity_check_02.PNG
			
		c. if (b) is doing correctly, run ``ldd /opt/oemclient/odbc60/64/lib/libodbc.so`` to verify library is loadable (i.e. no "not found")

		d. verify ``LD_LIBRARY_PATH`` environment is properly setup. If you see nothing, probably you're in bash. You need to use **ksh**.
		
		e. run ``db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc60/64/lib/libodbc.so -dsn mssql2005csdl1 -u j15user1 -p j15user1``

3.0 test method [mssql2005csdl1]
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
	
		3.0.1 run ``db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc60/64/lib/libodbc.so -dsn mssql2005csdl1 -u j15user1 -p j15user1`` :
		
			  `mssql2005 test result <../../_static/db2fedsvrcfg/mssql2005.txt>`_

		.. note::
		
			``DB2_NULL_EQUALITY`` and ``DB2_VARCHAR_NO_TRAILING_BLANKS`` will give out warning no matter how default values are set

3.1 test method [hive]
^^^^^^^^^^^^^^^^^^^^^^
	
		.. note::
			
			| 9.181.139.171
			| root/hadoop
			
		run ``db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc71/64/lib/libodbc.so -dsn hive -u root -p hadoop``
		
		.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/hive_error.PNG

		|
		
		.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/hive_error2.PNG

		**UPDATE: 11/11/15**
		
		.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/hive_error3.PNG
		
		reason: hiveserver2 on 9.181.139.171 takes all the memory (access by ``top``), which cannot take in any other connection.
		
		fix:	try to reboot the VM on 9.181.139.171
		
				- ``shutdown -r now``  this tells system to reboot NOW
					
					if this doesn't work, try following command:
					
						- ``ps -ef | grep java | more``
						- ``ps -ef | grep java | awk '{print $2}' | xargs kill -9``
						
					then retry ``shutdown -r now``
					
		verify: try either ``netstat -apn | grep 10000`` on 9.181.139.171 or 
				``telnet 9.181.139.171 10000`` on 9.112.250.80
				
				or try ``demoodbc -uid root -pwd hadoop -xml hive`` on 9.112.250.80
		
		**UPDATE: 11/12/15**
		
		.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/hive_error4.PNG
		
		Statement generated before the error:
		
			.. code-block:: sql
			
				 CREATE TABLE IITEST1 ( IT1C1 INTEGER, IT1C2 INTEGER, IT1C3 CHAR(1), IT1C4 CHAR(3), IT1C5 CHAR(10), IT1C6 VARCHAR(10), IT1C7 CHAR(100) )
				 
		Correct statement that can be created in hive directly:
		
			.. code-block:: sql
			
				CREATE TABLE IITEST1 ( IT1C1 int, IT1C2 int, IT1C3 CHAR(1), IT1C4 CHAR(3), IT1C5 CHAR(10), IT1C6 VARCHAR(10), IT1C7 CHAR(100) );
				
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/hive_correct.PNG
				 
3.2 test method [Impala]
^^^^^^^^^^^^^^^^^^^^^^^^

                .. note:: 

                        Using impala shell directly:

                        | 9.123.111.142
                        | cloudera/cloudera
                        | run ``impala-shell``
	
		use 9.112.250.80
	
		1. run ``autohive -if`` to config. You need to update ``[odbc]`` and ``[Impala_test1]`` manually in "odbc.ini"
		
			Here is an example from ``autohive -if`` output:
			
				.. code-block:: bash
				
					[ODBC]
					IANAAppCodePage=4
					InstallDir=/opt/oemclient/odbc71/64
					TraceDll=
					TraceFile=odbctrace.out
					UseCursorLib=0

					[Impala_test1]
					Driver=/opt/oemclient/odbc71/64/lib/VMimpala00.so
					Description=DataDirect 7.1 Impala Wire Protocol
					ArraySize=1024
					Database=default
					DefaultLongDataBuffLen=1024
					DefaultOrderByLimit=-1
					EnableDescribeParam=0
					HostName=9.123.111.142
					LoginTimeout=30
					LogonID=cloudera
					MaxVarcharSize=2147483647
					Password=
					PortNumber=21050
					RemoveColumnQualifiers=0
					ServicePrincipalName=
					StringDescribeType=-9
					TransactionMode=0
					UseCurrentSchema=0
					Trace=0
					TraceDll=/opt/oemclient/odbc71/64/lib/VMtrc00.so
					TraceFile=odbctrace.out
					QEWSD=2457260
					
			.. note::
			
				Again, [ODBC] has to stay top of odbc.ini

		2. Restart db through ``db2stop force; db2start``
		
		3. compose a clp file to see if the connection to impala works as expected:
		
			.. code-block:: sql
			
				connect to testdb;
				drop wrapper odbc;

				drop server SERVER1;

				create wrapper odbc options(MODULE '/home/iidev20/branded_odbc/lib/libodbc.so');

				create server "SERVER1" type odbc version 7.1 wrapper odbc authorization	
						"cloudera" password "cloudera" OPTIONS(node 'Impala_test1',dbname
						'default',CODEPAGE '1252');

				create user mapping for user server "SERVER1" options(REMOTE_AUTHID
						'cloudera',REMOTE_PASSWORD 'cloudera');

				create nickname nick1 for "SERVER1"."default"."tab1";

				create nickname nick2 for "SERVER1"."default"."tab2";

				describe table nick1;

		4. check output of clp file:
		
				.. code-block:: bash
				
					=> db2 -tvf impala.clp
					connect to testdb

					Database Connection Information

					Database server        = DB2/LINUXX8664 10.1.5
					SQL authorization ID   = IIDEV20
					Local database alias   = TESTDB


					drop wrapper odbc
					DB20000I  The SQL command completed successfully.

					drop server SERVER1
					DB21034E  The command was processed as an SQL statement because it was not a
					valid Command Line Processor command.  During SQL processing it returned:
					SQL0204N  "SERVER1" is an undefined name.  SQLSTATE=42704

					create wrapper odbc options(MODULE '/home/iidev20/branded_odbc/lib/libodbc.so')
					DB20000I  The SQL command completed successfully.

					create server "SERVER1" type odbc version 7.1 wrapper odbc authorization "cloudera" password "cloudera" OPTIONS(node 'Impala_test1',dbname 'default',CODEPAGE '1252')
					DB20000I  The SQL command completed successfully.

					create user mapping for user server "SERVER1" options(REMOTE_AUTHID 'cloudera',REMOTE_PASSWORD 'cloudera')
					DB20000I  The SQL command completed successfully.

					create nickname nick1 for "SERVER1"."default"."tab1"
					DB20000I  The SQL command completed successfully.

					create nickname nick2 for "SERVER1"."default"."tab2"
					DB20000I  The SQL command completed successfully.

					describe table nick1

													Data type                     Column
					Column name                     schema    Data type name      Length     Scale Nulls
					------------------------------- --------- ------------------- ---------- ----- ------
					ID                              SYSIBM    INTEGER                      4     0 Yes
					COL_1                           SYSIBM    SMALLINT                     2     0 Yes
					COL_2                           SYSIBM    DOUBLE                       8     0 Yes
					COL_3                           SYSIBM    TIMESTAMP                   10     6 Yes

					4 record(s) selected.

		5. run ``db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc71/64/lib/libodbc.so -dsn Impala_test1 -u cloudera -p cloudera``
		
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/impala_error.PNG
		

		**UPDATE 11/12/15:**
		
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/impala_error2.PNG

			
		**UPDATE 11/13/15:**
			
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/impala_error3.PNG
			
		
		6. run ``db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc71/64/lib/libodbc.so -dsn Impala_test1 -u cloudera -p cloudera -noprep`` instead.
		
			.. note::
			
				``-noprep`` means to skip remote creating table phase. Jump directly to the test query execution.
				Doing this avoid modifying db2fedsvrcfg tool heavily. In other words, **when user deal with Impala, hive data source,
				they should use ``-noprep`` and create test tables remotely before using the tool**
				
				
		**UPDATE 11/13/15:**
		
			`impala test result error4 <../../_static/db2fedsvrcfg/impala_error4.txt>`_
			
			.. image:: /project/db2fedsvrcfg/db2fedsvrcfg_static/impala_error4.PNG
			
			`db2fedsvrcfg.trc 11/13/15 <../../_static/db2fedsvrcfg/db2fedsvrcfg1113.trc>`_
			
			.. note::
			
				The reason for the incorrect analysis result is that ``Tuning_Server_Option_Analyzer::validate_table`` failed. 
				Clearly ``"IITEST1"`` doesn't match with ``IITEST1``. In other words, in table validation phase, quotation marks
				still matter. 
				
			.. todo::
			
				Two potential paths to fix:
				
					1. Eliminate quotation marks around ``IITEST1`` during table validation phase, and see if analyzer can proceed.
					
					2. When ``-noprep`` set, bypass table validation phase and directly to execute the test queries.
					
		**UPDATE 11/22/15:**
		
			Detailed analysis of the error message found on **UPDATE 11/13/15**:
			
			Detailed Error trace analysis:
			
			1. ``Tuning_Server_Option_Analyzer::validate``
			
				*The analysis failed for the following reason: Reason: "IITEST1" could not be found.*
				
				This error message is generated in function ``describe_table`` of ``db2odbct_operation.C`` when ``rc == RC_NO_DATA_FOUND``, which is ``2``.
				The ``2`` also appears in the trace that several lines above saying *Return code: 2*
				
			2. ``Tuning_Statement:: fetch``
			
				*Failure in the fetch of describe_table*
				
				This error happens when ``fetch`` function of ``db2odbct_statement.C`` called in ``describe_table`` of ``db2odbct_statement.C``, and the return code
				is not equal to ``RC_OK``
				
				
			Detailed Call stack:
			
			1. ``db2odbct_operation.C`` ``describe_table``
			
				``rc = m_statement->describe_table(m_table_info, a_rs_list);``
				
			2. ``db2odbct_statement.C`` ``describe_table``
			
				``rc = fetch(&rs_list);``
				
		.. note:: iitest1 table structure

                        .. image:: /project/db2fedsvrcfg/    db2fedsvrcfg_static/iitest1_struct.png

		
                Perform **mssql2005** and **impala** test using ``-noprep`` at the same time, and compare the trace file:
	
                Namely, 

                **mssql:**

                        .. code-block:: c++

                                db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc60/64/lib/libodbc.so -dsn mssql2005csdl1 -u j15user1 -p j15user1 -noprep

                **Impala:**
                        
                        .. code-block:: c++

                             db2fedsvrcfg -s SERVER1 -m /opt/oemclient/odbc71/64/lib/libodbc.so -dsn Impala_test1 -u cloudera -p cloudera -noprep	

                - ``Tuning_Connection::get_remote_attributes`` is executed and found in mssql trace but not in impala

                **Investigation:**

                        ``get_remote_attributes`` is found in ``db2odbct_connection.C``. Here is the header info about
                        this function:

                        .. code-block:: c++

                                	
                                Name  = Tuning_Connection::get_remote_attributes
                                ***********************************************************************/
                                /**
                                 *  \brief Get ODBC information by calling SQLGetInfo.
                                 *
                                 *  In this function, the following are got from the ODBC driver or
                                 *  data source:
                                 *    - SQL_ODBC_VER
                                 *    - SQL_DRIVER_ODBC_VER
                                 *    - SQL_DRIVER_NAME
                                 *    - SQL_IDENTIFIER_QUOTE_CHAR
                                 *  If it fails to get the SQL_IDENTIFIER_QUOTE_CHAR value, the double
                                 *  quote(") is used. The SQL_IDENTIFIER_QUOTE_CHAR will be used when 
                                 *  creating a remote SQL statement. The others will be used just as 
                                 *  debug info.
                                 *
                                 *  \note We don't case of any ODBC errors returned from SQLGetInfo, 
                                 *        because they are not a fatal error.
                                 *

                **Update: 11/24/15**

                        Known issue:

                        - code page issue. ``Tuning_Utilities::get_codepage`` get called, and ``SQL_CP_UNKNOWN`` 
                          is returned, which cause *Failed in getting codepage* error message.
						
			- ``fetch`` function return ``SQL_NO_DATA_FOUND`` (see `code analysis <../../_static/db2fedsvrcfg/112415.txt>`_)

                        
		**Update: 12/01/15**
			
                        `Impala final result <../../_static/db2fedsvrcfg/impala_result.txt>`_ 	
						
                **Update: 12/02/15**

                        :download:`Impala debug log<db2fedsvrcfg-debug-log-impala.html>`
